export const QA060 = [
  ["모듈별로 생성한 실행 파일들을 묶어 배포용 설치 파일을 만드는 것을 말하며, 사용자를 중심으로 진행한다", "소프트웨어 패키징"],
  ["소프트웨어 패키징 작업 순서는 \n(\0\0\0) > 모듈화 > 빌드 진행 > 사용자 환경 분석 > 패키징 및 적용 시험 > 패키징 변경 개선 > 배포 순이다.\n 괄호 안에 들어갈 단계는?", "기능 식별"],
  ["소프트웨어 패키징 작업 순서는 \n기능 식별 > (\0\0\0) > 빌드 진행 > 사용자 환경 분석 > 패키징 및 적용 시험 > 패키징 변경 개선 > 배포 순이다.\n 괄호 안에 들어갈 단계는?", "모듈화"],
  ["소프트웨어 패키징 작업 순서는 \n기능 식별 > 모듈화 > (\0\0\0) > 사용자 환경 분석 > 패키징 및 적용 시험 > 패키징 변경 개선 > 배포 순이다.\n 괄호 안에 들어갈 단계는?", "빌드 진행"],
  ["소프트웨어 패키징 작업 순서는 \n기능 식별 > 모듈화 > 빌드 진행 > (\0\0\0) > 패키징 및 적용 시험 > 패키징 변경 개선 > 배포 순이다.\n 괄호 안에 들어갈 단계는?", "사용자 환경 분석"],
  ["소프트웨어 패키징 작업 순서는 \n기능 식별 > 모듈화 > 빌드 진행 > 사용자 환경 분석 > (\0\0\0) > 패키징 변경 개선 > 배포 순이다.\n 괄호 안에 들어갈 단계는?", "패키징 및 적용 시험"],
  ["소프트웨어 패키징 작업 순서는 \n기능 식별 > 모듈화 > 빌드 진행 > 사용자 환경 분석 > 패키징 및 적용 시험 > (\0\0\0) > 배포 순이다.\n 괄호 안에 들어갈 단계는?", "패키징 변경 개선"],
  ["소프트웨어 패키징 작업 순서는 \n기능 식별 > 모듈화 > 빌드 진행 > 사용자 환경 분석 > 패키징 및 적용 시험 > 패키징 변경 개선 > (\0\0\0) 순이다.\n 괄호 안에 들어갈 단계는?", "배포"],
  ["패키징 작업 순서 중 작성된 코드의 기능을 확인하는 단계는?", "기능 식별"],
  ["패키징 작업 순서 중 확인된 기능 단위로 코드들을 분류하는 단계는?", "모듈화"],
  ["패키징 작업 순서 중 모듈 단위별로 실행 파일을 만드는 단계는?", "빌드 진행"],
  ["패키징 작업 순서 중 웹, 모바일, PC 등 소프트웨어가 사용될 환경이나 운영체제, CPU, RAM 등의 최소 운영 환경을 정의하는 단계는?", "사용자 환경 분석"],
  ["패키징 작업 순서 중 빌드된 실행 파일들을 정의된 환경에 맞게 배포용 파일 형식으로 패키징하는 단계이며, 정의된 환경과 동일한 환경에서 패키징 겨로가를 테스팅한 후 소프트웨어에 대한 불편사항을 사용자 입장에서 확인하는 단계는?", "패키징 및 적용 시험"],
  ["패키징 작업 순서 중 확인된 불편 사항을 반영하기 위한 패키징의 변경 및 개선을 진행하는 단계는?", "패키징 변경 개선"],
  ["패키징 작업 순서 중 배포 수행 시 오류가 발생하면 해당 개발자에게 전달하여 수정을 요청하는 단계는?", "배포"],
  ["소스 코드 파일들을 컴퓨터에서 실행할 수 있는 제품 소프트웨어로 변환하는 과정 또는 결과물", "빌드", "Build"],
  ["배포용 파일 형식 중 Windows용 패키지 형식은?", "msi"],
  ["배포용 파일 형식 중 Mac OS용 패키지 형식은?", "dmg"],
  ["배포용 파일 형식 중 java 응용 소프트웨어나 라이브러리를 배포하기 위한 패키지 형식은?", "jar"],
  ["배포용 파일 형식 중 java Servlet, java Class, xml 및 웹 애플리케이션 서비스를 제공하기 위한 패키지 형식은?", "war"],
  ["배포용 파일 형식 중 jar와 war를 묶어 하나의 애플리케이션 서비스를 제공할 수 있는 패키지 형식은?", "ear"],
  ["배포용 파일 형식 중 안드로이드용 앱 패키지 형식은?", "apk"],
  ["배포용 파일 형식 중 iOS용 앱 패키지 형식은?", "ipa"]
];

export const QA061 = [
  ["개발 과정에서 소프트웨어의 변경 사항을 관리하기 위해 개발된 일련의 활동으로 소프트웨어 개발의 전 단계에 적용되는 활동이며, 유지보수 단계에서도 수행됨", "형상 관리", "SCM", "Sofrware Configuration Management"],
  ["형상 관리 기능 중 형상 관리 대상에 이름과 관리 번호를 부여하고, 계층(Tree) 구조로 구분하여 수정 및 추적이 용이하도록 하는 작업", "형상 식별"],
  ["형상 관리 기능 중 소프트웨어 업그레이드나 유지 보수 과정에서 생성된 다른 버전의 형상 항목을 관리하고, 이를 위해 특정 절차와 도구(Tool)를 결합시키는 작업", "버전 제어"],
  ["형상 관리 기능 중 식별된 형상 항목에 대한 변경 요구를 검토하여 현재의 기분선(Base Line)이 잘 반영될 수 있도록 조정하는 작업", "형상 통제"],
  ["형상 관리 기능 중 기준선의 무결성을 평가하기 위해 확인, 검증, 검열 과정을 통해 공식적으로 승인하는 작업", "형상 감사"],
  ["형상 관리 기능 중 형상의 식별, 통제, 감사 작업의 결과를 기록, 관리하고 보고서를 작성하는 작업", "형상 기록"],
  ["소프트웨어 개발 단계의 각 과정에서 만들어지는 프로그램, 프로그램을 설명하는 문서, 데이터 등을 통칭하는 말", "형상"],
  ["소프트웨어의 버전 등록 관련 주요 기능 중 최신 버전의 파일들과 변경 내역에 대한 정보들이 저장되어 있는 곳", "저장소", "Repository"],
  ["소프트웨어의 버전 등록 관련 주요 기능 중 버전 관리가 되고 있지 않은 아무것도 없는 저장소(Repository)에 처음으로 파일을 복사하는 것", "가져오기", "Import"],
  ["소프트웨어의 버전 등록 관련 주요 기능 중 프로그램을 수정하기 위해 저장소(Repository)에서 파일을 받아오는 것으로 소스 파일과 함께 버전 관리를 위한 파일들도 받아오는 것", "체크아웃", "Check-Out"],
  ["소프트웨어의 버전 등록 관련 주요 기능 중 체크아웃 한 파일의 수정을 완료한 후 저장소(Repository)의 파일을 새로운 버전으로 갱신하는 것", "체크인", "Check-In"],
  ["소프트웨어의 버전 등록 관련 주요 기능 중 체크인을 수행할 때 이전에 갱신된 내용이 있는 경우에는 충돌(Conflict)을 알리고 diff 도구를 이용해 수정한 후 갱신을 완료하는 것", "커밋", "Commit"],
  ["소프트웨어의 버전 등록 관련 주요 기능 중 저장소에 있는 최신 버전으로 자신의 작업 공간을 동기화하는 것", "동기화", "Update"],
  ["비교 대상이 되는 파일들의 내용(소스 코드)을 비교하며 서로 다른 부분을 찾아 표시해 주는 도구", "diff도구"],
  ["소프트웨어 버전 등록 과정은 \n(\0\0\0) > 인출(Check-Out) > 예치(Commit) > 동기화(Update) > 차이(Diff) 이다. \n괄호 안에 들어갈 단계는?", "가져오기", "Import"],
  ["소프트웨어 버전 등록 과정은 \n가져오기(Import) > (\0\0\0) > 예치(Commit) > 동기화(Update) > 차이(Diff) 이다. \n괄호 안에 들어갈 단계는?", "인출", "Check-Out"],
  ["소프트웨어 버전 등록 과정은 \n가져오기(Import) > 인출(Check-Out) > (\0\0\0) > 동기화(Update) > 차이(Diff) 이다. \n괄호 안에 들어갈 단계는?", "예치", "Commit"],
  ["소프트웨어 버전 등록 과정은 \n가져오기(Import) > 인출(Check-Out) > 예치(Commit) > (\0\0\0) > 차이(Diff) 이다. \n괄호 안에 들어갈 단계는?", "동기화", "Update"],
  ["소프트웨어 버전 등록 과정은 \n가져오기(Import) > 인출(Check-Out) > 예치(Commit) > 동기화(Update) > (\0\0\0) 이다. \n괄호 안에 들어갈 단계는?", "차이", "Diff"],
  ["소프트웨어 버전 등록 과정 중 개발자가 저장소에 신규로 파일을 추가하는 단계", "가져오기", "Import"],
  ["소프트웨어 버전 등록 과정 중 수정 작업을 진행할 개발자가 저장소에 추가된 파일을 자신의 작업 공간으로 인출하는 단계", "인출", "Check-Out"],
  ["소프트웨어 버전 등록 과정 중 인출한 파일을 수정한 후 성명을 붙여 저장소에 예치하는 단계", "예치", "Commit"],
  ["소프트웨어 버전 등록 과정 중 커밋(Commit) 후 새로운 개발자가 자신의 작업 공간을 동기화(Update)하는데 이 때 기존 개발자가 추가했던 파일이 전달되는 단계", "동기화", "Update"],
  ["소프트웨어 버전 등록 과정 중 새로운 개발자가 추가된 파일의 수정 기록(Change Log)을 확인하면서 이전 개발자가 처음 추가한 파일과 이후 변경된 파일의 차이를 확인하는 단계", "차이", "Diff"]
 ];

 export const QA062 = [
  ["버전 관리 자료가 지역 컴퓨터의 공유 폴더에 저장되어 관리 되는 방식으로 파일을 잘못 복사하거나 다른 위치로 복사하는 것에 대비하기 위해 파일의 변경 사항을 데이터베이스에 기록하여 관리하며, SCCS, RCS, PVCS, QVCS 등이 있음", "공유 폴다 방식"],
  ["버전 관리 자료가 서버에 저장되어 관리 되는 방식으로 모든 버전 관리는 서버에서 수행되기 때문에 서버에 문제가 생기면 서버가 복구되기 전까지 다른 개발자와의 협업 및 버전 관리 작업은 중단되며, CVS, SVN, CVSNT, Clear Case, CMVC, Perforce 등이 있음", "클라이언트/서버 방식"],
  ["버전 관리 자료가 하나의 원격 저장소와 분산된 개발자 PC의 지역 저장소에 함께 저장되어 관리되는 방식으로 지역 저장소에서 버전 관리가 가능하므로 원격 저장소에 문제가 생겨도 지역 저장소의 자료를 이용하여 작업할 수 있으며, Git, GNU, arch, DCVS, Bazaar, Mercurial, TeamWare, Bitkeeper, Plastic SCM 등이 있음", "분산 저장소 방식"],
  ["CVS를 개선한 것으로 아차피 소프트웨어 재단에서 2000년에 발표하였으며, 클라이언트/서버 구조로, 서버에는 최신 버전의 파일들과 변경 사항이 관리되고, CVS의 단점이었던 파일이나 디렉터리의 이름 변경, 이동 등이 가능함", "Subversion", "서브버전", "SVN"],
  ["Subversion의 주요 명령어 중 새로운 파일이나 디렉터리를 버전 관리 대상으로 등록하는 명령어", "add"],
  ["Subversion의 주요 명령어 중 버전 관리 대상으로 등록된 클라이언트의 소스 파일을 서버의 소스 파일에 적용하는 명령어", "commit"],
  ["Subversion의 주요 명령어 중 서버의 최신 commit 이력을 클라이언트의 소스 파일에 적용하는 명령어로, commit 전에는 매번 이 명령어를 수행하여 클라이언트에 적용되지 않은 서버의 변동 내역을 클라이언트에 적용하는 명령어", "update"],
  ["Subversion의 주요 명령어 중 버전 관리 정보와 소스 파일을 서버에서 클라이언트로 받아오는 명령어", "checkout"],
  ["Subversion의 주요 명령어 중 서버의 소스 파일이나 디렉터리를 잠그는 명령어", "lock"],
  ["Subversion의 주요 명령어 중 서버의 소스 파일이나 디렉터리를 잠그는 명령어", "unlock"],
  ["Subversion의 주요 명령어 중 아무것도 없는 서버의 저장소에 맨 처음 소스 파일을 저장하는 명령으로, 한 번 사용하면 다시 사용하지 않는 명령어", "import"],
  ["Subversion의 주요 명령어 중 버전 관리에 대한 정보를 제외한 순수한 소스 파일만을 서버에서 받아오는 명령어", "export"],
  ["Subversion의 주요 명령어 중 지정한 파일에 대한 위치나 마지막 수정 일자 등에 대한 정보를 표시하는 명령어", "info"],
  ["Subversion의 주요 명령어 중 지정된 파일이나 경로에 대해 이전 리비전과의 차이를 표시하는 명령어", "diff"],
  ["Subversion의 주요 명령어 중 다른 디렉터리에서 작업된 버전 관리 내역을 기본 개발 작업과 병합하는 명령어", "merge"],
  ["리누스 토발즈(Linus Torvalds)가 2005년 리눅스 커널 개발에 사용할 관리 도구로 개발한 이후 주니오 하마노(Junio Hamano)에 의해 유지 보수 되고 있고, 분산 버전 관리 시스템으로 2개의 저장소, 즉 지역 저장소와 원격 저장소가 존재함", "Git", "깃"],
  ["Git의 주요 명령어 중 작업 내역을 지역 저장소에 저장하기 위해 스테이징 영역(Staging Area)에 추가하며 '--all' 옵션으로 작업 디렉터리의 모든 파일을 스테이징 영역에 추가할 수 있는 명령어", "add"],
  ["Git의 주요 명령어 중 작업 내역을 지역 저장소에 저장하는 명령어", "commit"],
  ["Git의 주요 명령어 중 새로운 브랜치를 생성하는 명령어", "branch"],
  ["Git의 주요 명령어 중 지정한 브랜치로 이동하는 명령어로 현재 작업 중인 브랜치는 HEAD 포인터가 가리키는데 이 명령을 통해 HEAD 포인터를 지정한 브랜치로 이동시키는 명령어", "checkout"],
  ["Git의 주요 명령어 중 지정한 브랜치의 변경 내역을 현재 HEAD 포인터가 가리키는 브랜치에 반영함으로써 두 브랜치를 병합하는 명령어", "merge"],
  ["Git의 주요 명령어 중 지역 저장소를 생성하는 명령어", "init"],
  ["Git의 주요 명령어 중 원격 저장소에 연결하는 명령어", "remote add"],
  ["Git의 주요 명령어 중 로컬 저장소의 변경 내역을 원격 저장소에 반영하는 명령어", "push"],
  ["Git의 주요 명령어 중 원격 저장소의 변경 이력만을 지역 저장소로 가져와 반영하는 명령어", "fetch"],
  ["Git의 주요 명령어 중 원격 저장소의 전체 내용을 지역 저장소로 복제하는 명령어", "clone"],
  ["Git의 주요 명령어 중 지정한 원격 저장소의 내용을 자신의 원격 저장소로 복제하는 명령어", "fork"]
];

export const QA063 = [
  ["빌드를 포함하여 테스트 및 배포를 자동화하는 도구로 애자일(Agile)과 같은 지속적인 통합(Continuous Integration) 개발 환경에서 유용하게 활용되며 Ant, Make, Maven, Gradle, Jenkins 등이 있음", "빌드 자동화 도구"],
  ["JAVA 기반의 오픈 소스 형태로, 서블릿 컨테이너에서 실행되는 서버 기반 도구이며, 가장 많이 사용되는 빌드 자동화 도구이며 친숙한 Web GUI 제공으로 사용이 쉬움", "Jenkins"],
  ["Groovy를 기반으로 한 오픈 소스 형태의 자동화 도구이며, 안드로이드 앱 개발 환경에서 사용되는데, 플러그인을 설정하면, JAVA, C/C++, Python 등의 언어도 빌드할 수 있으며, DSL(Domain Specific Language)을 스크립트 언어로 사용함", "Gradle"],
  ["자바에 Python, Ruby, Smalltalk 등의 장점을 결합한 동적 객체 지향 프로그래밍 언어", "Groovy"],
  ["웹페이지 영역에 특화되어 사용되는 HTML과 같이 특정한 도메인, 즉 영역이나 용도에 맞게 기능을 구성한 언어를 말함", "DSL", "Domain Specitic Language"],
  ["HTML 문서 안에 직접 프로그래밍 언어를 삽입하여 사용하는 것으로, 기계어로 컴파일 되지 않고 별도의 번역기가 소스를 분석하여 동작하게 하는 언어", "스크립트 언어", "Script Language"]
];