export const QA059 = [
  ["나쁜 코드(Bad Code)를 배제하고, 클린 코드(Clean Code)로 작성하는 것", "소스 코드 최적화"],
  ["누구나 쉽게 이해하고, 수정 및 추가할 수 있는 단순, 명료한 코드, 즉 잘 작성된 코드", "클린 코드", "Clean Code"],
  ["프로그램의 로직(Logic)이 복잡하고 이해하기 어려운 코드로, 대표적으로 스파게티 코드와 외계인 코드가 있음", "나쁜 코드", "Bad Code"],
  ["코드의 로직이 서로 복잡하게 얽혀 있는 나쁜 코드의 대표적인 예", "스파게티 코드"],
  ["아주 오래되거나 참고문서 또는 개발자가 없어 유지보수 작업이 어려운, 나쁜 코드의 대표적인 예", "외계인 코드"],
  ["클린 코드의 작성 원칙 중 누구든지 코드를 쉽게 읽을 수 있도록 작성하고, 코드 작성 시 이해하기 쉬운 용어를 사용하거나 들여쓰기 기능 등을 사용한다는 원칙", "가독성"],
  ["클린 코드의 작성 원칙 중 코드를 간단하게 작성하고, 한 번에 한 가지를 처리하도록 코드를 작성하고 클래스/메소드/함수 등을 최소 단위로 분리한다는 원칙", "단순성"],
  ["클린 코드의 작성 원칙 중 코드가 다른 모듈에 미치는 영향을 최소화하고, 코드 변경 시 다른 부분에 영향을 없도록 작성한다는 원칙", "의존성 배제"],
  ["클린 코드의 작성 원칙 중 코드의 중복성을 최소화하고, 중복된 코드는 삭제하고 공통된 코드를 사용한다는 원칙", "중복성 최소화"],
  ["클린 코드의 작성 원칙 중 상위 클래스/메소드/함수에서는 간략하게 애플리케이션의 특성을 나타내고, 상세 내용은 하위 클래스/메소드/함수에서 구현한다는 원칙", "추상화"],
  ["소스 코드 최적화 유형 중 하나의 클래스는 하나의 역할만 수행하도록 응집도를 높이고, 크기를 작게 작성하는 유형", "클래스 분할 배치"],
  ["소스 코드 최적화 유형 중 인터페이스 클래스를 이용하여 추상화된 자료 구조와 메소드를 구현함으로써 클래스 간의 의존성을 최소화하는 유형", "느슨한 결합", "Loosely Coupled"],
  ["명령어나 호출문 등 모듈의 내부 요소들이 서로 관련되어 있는 정도, 즉 모듈이 독립적인 기능으로 정의되어 있는 정도를 의미함", "응집도", "Cohesion"],
  ["불필요한 부분을 생략하고 객체의 속성 중 가장 중요한 것에만 중점을 두어 개략화하는 것, 즉 모델화하는 것", "추상화", "Abstraction"],
  ["소스 코드의 코딩 스타일, 코드에 설정된 코딩 표준, 코드의 복잡도, 코드에 존재하는 메모리 누수 현상, 스레드 결함 등을 발견하기 위해 사용하는 분석 도구로 성적 분석 도구와 동적 분석 도구로 나뉨", "소스 코드 품질 분석 도구"],
  ["작성한 소스 코드를 실행하지 않고 코딩 표준이나 코딩 스타일 결함 등을 확인하는 코드 분석 도구로, pmd, cppcheck, SonarQube, checkstyle, ccm, cobertura 등이 있음", "정적 분석 도구"],
  ["작성한 소스 코드를 실행하여 코드에 존재하는 메모리 누수, 스레드 결함 등을 분석하는 도구로, Avalanche, Valgrind 등이 있음", "동적 분석 도구"],
  ["소스 코드 품질 분석 도구의 종류 중 Linux, Windows 환경에서 지원하며 소스 코드에 대한 미사용 변수, 최적화되지 않은 코드 등 결함을 유발할 수 있는 코드를 검사하는 도구", "pmd"],
  ["소스 코드 품질 분석 도구의 종류 중 Windows 환경에서 지원하며 C/C++ 코드에 대한 메모리 누수, 오버플로우 등을 분석하는 도구", "cppcheck"],
  ["소스 코드 품질 분석 도구의 종류 중 Cross-Platform 환경에서 지원하며 중복 코드, 복잡도, 코딩 설계 등을 분석하는 소스 분석 통합 플랫폼", "SonarQube"],
  ["소스 코드 품질 분석 도구의 종류 중 Cross-Platform 환경에서 지원하며, 자바 코드에 대해 소스 코드 표준을 따르고 있는지 검사하고, 다양한 개발 도구에 통합하여 사용 가능한 도구", "checkstyle"],
  ["소스 코드 품질 분석 도구의 종류 중 Cross-Platform 환경에서 지원하며, 다양한 언어의 코드 복잡도를 분석하는 도구", "ccm"],
  ["소스 코드 품질 분석 도구의 종류 중 Cross-Platform 환경에서 지원하며, 자바 언어의 소스 코드 복잡도 분석 및 테스트 커버리지를 측정하는 도구", "cobertura"],
  ["소스 코드 품질 분석 도구의 종류 중 Linux, Android 환경에서 지원하며, Valgrind 프레임워크 및 STP 기반으로 구현되며, 프로그램에 대한 결함 및 취약점 등을 분석하는 도구", "Avalanche"],
  ["소스 코드 품질 분석 도구의 종류 중 Cross-Platform 환경에서 지원하며, 프로그램 내에 존재하는 메모리 및 쓰레드 결함 등을 분석하는 도구", "Valgrind"]
];